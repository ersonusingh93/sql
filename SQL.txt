SQL : 
Structured Query Language : 
Relational Database Management System : 
Normalization : 


DDL : Data Definition Language - Create, Alter, Drop, Truncate
DML : Data Manipulation Language - Insert, Update, Delete, Call, Exmpalin Call
DCL : Data Control Language - Grant and Revoke
TCL : Transaction Control Language - Commit, Rollback, Savepoint
DQL : Data Query Language - Select

Normalization is the process of organizing data in a database. It includes creating tables and establishing relationships between those tables according to rules designed both to protect the data and to make the database more flexible by eliminating redundancy and inconsistent dependency.

A - Atomicity
C - Consistency
I - Isolation
D - Durability

First normal form
Eliminate repeating groups in individual tables.
Create a separate table for each set of related data.
Identify each set of related data with a primary key.

Constraints
Constraints provide details about the usage of a column and are applied after specifying the column's data type.
They enable the database to reject any inserted data that violates a particular constraint.
The following statement is used to impose constraints on the "employee" table.

Below is the query to create a table student with a set of constraints.

     CREATE TABLE  student(
     student_id INTEGER PRIMARY KEY,
     student_Name TEXT UNIQUE,
     Department TEXT NOT NULL); 
PRIMARY KEY can be utilized to uniquely identify a row in a table.
When attempting to insert a row with the same value as an existing row in the table, a constraint violation will occur, preventing the insertion of the new row.
UNIQUE columns contain distinct values for each row, similar to "PRIMARY KEY" columns, but unlike primary key columns, a table can have multiple unique columns..
NOT NULL columns must have a value assigned to them.
When attempting to insert a row without providing a value for a "NOT NULL" column, a constraint violation will occur, preventing the insertion of the new row.
Task
Write a query to create a table employee with the mentioned constraints on the columns :

employee_id - INTEGER PRIMARY KEY,
employee_Name - TEXT UNIQUE,
Department - TEXT NOT NULL

Normal Forms	Description
1NF	Any relation is said to be in 1NF if it contains only atomic values.
2NF	Any relation is said to be in 2NF only if it is in 1NF AND all other attributes except the primary key are fully functionally dependent on the primary key.
3NF	A relation is said to be in 3NF only if it is in 2NF AND there is no transition dependency between any attributes.
4NF	A relation is said to be in 4NF only if it is in BCNF(will be discussed further) and the relation doesn't consist of any multivalued dependency
5NF	A relation is said to be in 5NF only if it is in 4NF and the relation does not have any join dependancy, i.e. any join performed with respect to the attributes must not cause any loss.


Aggregate Function : 

Name	Description
AVG()	Return the average value of the argument
BIT_AND()	Return bitwise AND
BIT_OR()	Return bitwise OR
BIT_XOR()	Return bitwise XOR
COUNT()	Return a count of the number of rows returned
COUNT(DISTINCT)	Return the count of a number of different values
GROUP_CONCAT()	Return a concatenated string
JSON_ARRAYAGG()	Return result set as a single JSON array
JSON_OBJECTAGG()	Return result set as a single JSON object
MAX()	Return the maximum value
MIN()	Return the minimum value
STD()	Return the population standard deviation
STDDEV()	Return the population standard deviation
STDDEV_POP()	Return the population standard deviation
STDDEV_SAMP()	Return the sample standard deviation
SUM()	Return the sum
VAR_POP()	Return the population standard variance
VAR_SAMP()	Return the sample variance
VARIANCE()	Return the population standard variance

Time function : 

Name	Description
ADDDATE()	Add time values (intervals) to a date value
ADDTIME()	Add time
CONVERT_TZ()	Convert from one time zone to another
CURDATE()	Return the current date
CURRENT_DATE(), CURRENT_DATE	Synonyms for CURDATE()
CURRENT_TIME(), CURRENT_TIME	Synonyms for CURTIME()
CURRENT_TIMESTAMP(), CURRENT_TIMESTAMP	Synonyms for NOW()
CURTIME()	Return the current time
DATE()	Extract the date part of a date or datetime expression
DATE_ADD()	Add time values (intervals) to a date value
DATE_FORMAT()	Format date as specified
DATE_SUB()	Subtract a time value (interval) from a date
DATEDIFF()	Subtract two dates
DAY()	Synonym for DAYOFMONTH()
DAYNAME()	Return the name of the weekday
DAYOFMONTH()	Return the day of the month (0-31)
DAYOFWEEK()	Return the weekday index of the argument
DAYOFYEAR()	Return the day of the year (1-366)
EXTRACT()	Extract part of a date
FROM_DAYS()	Convert a day number to a date
FROM_UNIXTIME()	Format Unix timestamp as a date
GET_FORMAT()	Return a date format string
HOUR()	Extract the hour
LAST_DAY	Return the last day of the month for the argument
LOCALTIME(), LOCALTIME	Synonym for NOW()
LOCALTIMESTAMP, LOCALTIMESTAMP()	Synonym for NOW()
MAKEDATE()	Create a date from the year and day of year
MAKETIME()	Create time from hour, minute, second
MICROSECOND()	Return the microseconds from argument
MINUTE()	Return the minute from the argument
MONTH()	Return the month from the date passed
MONTHNAME()	Return the name of the month
NOW()	Return the current date and time
PERIOD_ADD()	Add a period to a year-month
PERIOD_DIFF()	Return the number of months between periods
QUARTER()	Return the quarter from a date argument
SEC_TO_TIME()	Converts seconds to 'hh:mm:ss' format
SECOND()	Return the second (0-59)
STR_TO_DATE()	Convert a string to a date
SUBDATE()	Synonym for DATE_SUB() when invoked with three arguments
SUBTIME()	Subtract times
SYSDATE()	Return the time at which the function executes
TIME()	Extract the time portion of the expression passed
TIME_FORMAT()	Format as time
TIME_TO_SEC()	Return the argument converted to seconds
TIMEDIFF()	Subtract time
TIMESTAMP()	With a single argument, this function returns the date or datetime expression; with two arguments, the sum of the arguments
TIMESTAMPADD()	Add an interval to a datetime expression
TIMESTAMPDIFF()	Return the difference of two datetime expressions, using the units specified
TO_DAYS()	Return the date argument converted to days
TO_SECONDS()	Return the date or datetime argument converted to seconds since Year 0
UNIX_TIMESTAMP()	Return a Unix timestamp
UTC_DATE()	Return the current UTC date
UTC_TIME()	Return the current UTC time
UTC_TIMESTAMP()	Return the current UTC date and time
WEEK()	Return the week number
WEEKDAY()	Return the weekday index
WEEKOFYEAR()	Return the calendar week of the date (1-53)
YEAR()	Return the year
YEARWEEK()	Return the year and week


operators : 

Name	Description	Introduced	Deprecated
&	Bitwise AND		
>	Greater than operator		
>>	Right shift		
>=	Greater than or equal operator		
<	Less than operator		
<>, !=	Not equal operator		
<<	Left shift		
<=	Less than or equal operator		
<=>	NULL-safe equal to operator		
%, MOD	Modulo operator		
*	Multiplication operator		
+	Addition operator		
-	Minus operator		
-	Change the sign of the argument		
->	Return value from JSON column after evaluating path; equivalent to JSON_EXTRACT().		
->>	Return value from JSON column after evaluating path and unquoting the result; equivalent to JSON_UNQUOTE(JSON_EXTRACT()).		
/	Division operator		
:=	Assign a value		
=	Assign a value (as part of a SET statement, or as part of the SET clause in an UPDATE statement)		
=	Equal operator		
^	Bitwise XOR		
AND, &&	Logical AND		
BETWEEN ... AND ...	Whether a value is within a range of values		
BINARY	Cast a string to a binary string		8.0.27
CASE	Case operator		
DIV	Integer division		
IN()	Whether a value is within a set of values		
IS	Test a value against a boolean		
IS NOT	Test a value against a boolean		
IS NOT NULL	NOT NULL value test		
IS NULL	NULL value test		
LIKE	Simple pattern matching		
MEMBER OF()	Returns true (1) if first operand matches any element of JSON array passed as second operand, otherwise returns false (0)	8.0.17	
NOT, !	Negates value		
NOT BETWEEN ... AND ...	Whether a value is not within a range of values		
NOT IN()	Whether a value is not within a set of values		
NOT LIKE	Negation of simple pattern matching		
NOT REGEXP	Negation of REGEXP		
OR, ||	Logical OR		
REGEXP	Whether string matches regular expression		
RLIKE	Whether string matches regular expression		
SOUNDS LIKE	Compare sounds		
XOR	Logical XOR		
|	Bitwise OR		
~	Bitwise inversion



Atomicity
The term Atomicity means that the data should remain Atomic during the entire transaction process. It means that either the process should be completed or should not occur at all. Letâ€™s understand this using an example. Suppose you have a task to fill a water bottle. If the process of filling water has to be atomic, you will have only two options. You can either fill the bottle completely or not fill even a single drop of water.

You cannot fill the bottle half or three-fourths. This is the simple meaning of Atomicity in DBMS. A transaction can be completed in one go or cannot occur at all. There is nothing like a partial transaction in DBMS.

Atomicity has two major operations in DBMS:

Abort: If a transaction is aborted, the changes in the database are not visible.
Commit: Commit is used to permanently save the changes made during the transaction in DBMS.
Consistency
Consistency means the Integrity Constraints must be maintained appropriately so that the data remains consistent before and after the transaction. The term Consistency of ACID Properties in DBMS simply emphasizes preserving the data before and after the transaction process.

For example,  if you have Rs. 1,000 and you purchase a product worth Rs. 200 then, the remaining amount is Rs. 800 and the seller gets Rs. 200. But, you sum up the total money before and after the transaction process, its total sum is Rs. 1,000. Thus, data consistency is maintained during the transaction process.

Isolation
Isolation means multiple transactions can occur simultaneously without affecting each other. In simple words, Isolation refers to consistency in data among concurrent transactions occurring in the database. It aims to assure that no data should affect another one when multiple transaction processes are going on.

Suppose you and your friend purchase an item at the same time. When you proceed with online payment, you are able to do so as if there is no other transaction happening. But, in reality, your friendâ€™s payment has been done at the same time. Thus, Isolation determines how the changes made during one transaction are to other transactions in the database.

Durability
Durability is one of the important ACID Properties in DBMS as it assures that the data should remain permanent in the database after successful transaction operations. This is important because if the system suffers from a failure, the data should remain intact so that it can be accessed.

This is the reason why databases can survive even if the system crashes or suffers from failure. To assure Durability, the changes made in the data should be committed every time in the database. This will maintain the Durability of the data in the database.

This is how ACID Properties in DBMS assure data integrity during the whole transaction process. These properties are prerequisites for studying Transaction Processing and Concurrency Control in DBMS,